---
- hosts: localhost
  gather_facts: no
  vars:
    root_pass: root
    routers: "{{ lookup('file', 'rtor.json') | from_json }}"
  # vars_files: 
  #   - routerConnectionParams.yml

  tasks:
    - debug:
         msg: "{{routers}}"
    
    
    # Define a new network
    - name: Define Virtual Network
      virt_net:
        command: define
        name: "{{routers.networkName}}"
        xml: "{{ lookup('template', 'templates/networkCreation.xml.j2' ) }}"
      with_items: 
        - "{{routers}}" 
      ignore_errors: true

    # Create and start a network
    - name: Create Virtual Network if not created
      virt_net:
        command: create
        name: "{{ routers.networkName }}"
      #with_items: "{{ routers | list }}"
      ignore_errors: true
      become: yes
    #random mac - ':'.join('%02x'%random.randrange(256) for _ in range(6))
    - name: Get Mac for R1 interface
      script: mac.py
      register: r1

    - name: Get Mac for R2 interface
      script: mac.py
      register: r2

    - name : Attach network to R1
      # command: "virsh attach-interface –-domain '{{routers.sourceRouter}}' -–type network -–source '{{routers.networkName}}' -–model virtio –-config"
      command: "virsh attach-interface --domain '{{routers.sourceRouter}}' --type network --source {{routers.networkName}} --model virtio --config --live"

    - name : Attach network to R2
      #command: "virsh attach-interface –-domain '{{routers.destinationRouter}}' –-type network –-source '{{routers.networkName}}' -–model virtio –-mac '{{r2.stdout_lines[0]}}' –-config –-live"
      command: "virsh attach-interface --domain '{{routers.destinationRouter}}' --type network --source {{routers.networkName}} --model virtio --config --live"

   #  # Set interface bridge up
   #  - name: Set Interface of bridges up
   #    command: "sudo ifconfig {{subnets[item].subnet_name}} up"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Create veth pair
   #  - name: Create veth pairs
   #    command: "ip link add {{subnets[item].subnet_name}}vif1 type veth peer name {{subnets[item].subnet_name}}vif2"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Add vethpair interface to namespace
   #  - name: Add vethpair interface to namespace
   #    command: "ip link set {{subnets[item].subnet_name}}vif1 netns {{subnets[item].vpc_name}}_ns"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Attach another veth pair interface with bridge
   #  - name: Attach another vethpair interface to bridge
   #    command: "brctl addif {{subnets[item].subnet_name}} {{subnets[item].subnet_name}}vif2"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Turn hypervisor interface up
   #  - name: Turn hypervisor interface up
   #    command: "ifconfig {{subnets[item].subnet_name}}vif2 up"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Assign ip to vethpair interface inside vpc namespace
   #  - name: Add vethpair interface to namespace
   #    command: "ip netns exec {{subnets[item].vpc_name}}_ns ifconfig {{subnets[item].subnet_name}}vif1 {{subnets[item].vpc_gateway}} up"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   #  # Add ip table rules NAT inside the vpc namespace for subnet
   #  - name: Add ip table rules NAT inside the vpc namespace for subnet
   #    command: "ip netns exec {{subnets[item].vpc_name}}_ns iptables -t nat -I POSTROUTING 1 -s {{subnets[item].subnet_range}} ! -d {{subnets[item].subnet_range}} -j MASQUERADE"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

   # # Provide  DHCP and DNS 
   #  - name: Make the interface of subnet to run dhcp server
   #    command: "ip netns exec {{subnets[item].vpc_name}}_ns dnsmasq --interface={{subnets[item].subnet_name}}vif1 --except-interface=lo --bind-interfaces --dhcp-range={{subnets[item].dhcp_range}}"
   #    with_items: "{{ subnets | list }}"
   #    ignore_errors: true
   #    become: yes

    # # Write to database or run this script seperately from shell
    # - name: Writing this newly created subnet to DB
    #   include: write_subnet_db.yml
